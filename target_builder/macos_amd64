#! /usr/bin/env bash
set -e
set -u
set -o pipefail
# if running in ci, print more message in console
if [[ -n "$CI_ENV" ]]; then
	echo "Running in debug mode"
	set -x
fi

# one package one line
preinstalled_packages="
	bash
	podman
	dmesg
	procps
	findmnt
	blkid
	mount
	tar
	zstd
	tzdata
	socat
	"

echo "workspace: ${workspace:?}"
echo "output: ${output:?}"

bootable_url="https://github.com/oomol/builded/releases/download/v1.5/alpine_uefi_bootable-x86_64.img.zst"
bootable_img_zst="$output/$(basename "$bootable_url")"
bootable_img="${bootable_img_zst%.*}"
profile_name="$(basename "${target_profile:?}")"
proot_args=()
rootfs_dir="$output/rootfs_amd64"
if [[ $BUILD_TYPE == cross ]]; then
	proot_args+=("--qemu=$output/qemu_bins/static_qemu/bin/qemu-x86_64")
fi
proot_args+=("-r" "$rootfs_dir")
proot_args+=("-b" "/dev:/dev")
proot_args+=("-b" "/sys:/sys")
proot_args+=("-b" "/proc:/proc")
proot_args+=("-b" "/etc/resolv.conf:/etc/resolv.conf")
proot_args+=("-w" "/root")

# alpine_uefi_bootable.img.zst has ROOTFS and EFI partition
rootfs_part_uuid="4f1bfa20-73e8-4885-ab4b-1f9e67332f79"
efi_part_uuid="F41A-23A6"

bootstrap_alpine() {
	echo "bootstrap alpine"
	cd "$workspace"
	sudo rm -rf "$bootable_img_zst" "$bootable_img"

	mkdir -p "$output"
	wget -c "$bootable_url" --output-document="${bootable_img_zst}" --output-file="$output/wget_alpine_image.log"

	cd "$output"
	zstd -d -f "${bootable_img_zst}"
	# Mapping the part into /dev/mapper/loopNpN
	kpartx -av "$bootable_img"
	mount -m -U $rootfs_part_uuid "$rootfs_dir"
	mount -m -U $efi_part_uuid "$rootfs_dir/boot/efi"

	# add community repo into alpine repositories
	echo http://dl-cdn.alpinelinux.org/alpine/v3.20/community | tee -a "$rootfs_dir/etc/apk/repositories"

	# Install required package into rootfs

	echo "install pkgs into rootfs"
	pkgs=$(echo "$preinstalled_packages" | xargs)
	sudo -E proot "${proot_args[@]}" -0 /bin/su -c "apk update && apk add $pkgs"

	echo "generat ssh keys and copy into rootfs"
	sudo -E proot "${proot_args[@]}" -0 /bin/su -c 'rm -rf /root/.ssh/ovm_id && \
		ssh-keygen -f /root/.ssh/ovm_id -N "" && \
		cat /root/.ssh/ovm_id.pub >> /root/.ssh/authorized_keys'

	#tar -Jcvf "$output/macos_arm64_ssh.tar.xz" "$rootfs_dir/root/.ssh"
	sync
}

install_target_profile_deps() {
	echo "install build deps"
	if [[ $SKIP_APT_GET_INSTALL == "true" ]]; then
		echo 'env SKIP_APT_GET_INSTALL == true, skip install required package'
	else
		sudo -E apt update
		sudo -E apt -y install wget kpartx zstd
	fi
}

clean_mapping() {
	echo "clean disk mapping"
	findmnt "$rootfs_dir" && {
		umount -R "$rootfs_dir"
	} || {
		echo "$rootfs_dir not mount, no need to unmount"
	}
}

copy_layer() {
	cd "$workspace"
	layer_dir="$workspace/layers/$profile_name"

	echo "copy $layer_dir layers files"
	# In MacOS the console device is hvc0
	# In Qemu the console device is ttyAMA0
	if [[ $VM_PROVIDER == "qemu" ]]; then
		find ./ -type f -exec sed -i 's/VM_CONSOLE_DEVICE/ttyAMA0/g' {} + # Replace VM_CONSOLE_DEVICE to ttyAMA0
	else
		find ./ -type f -exec sed -i 's/VM_CONSOLE_DEVICE/hvc0/g' {} + # Replace VM_CONSOLE_DEVICE to hvc0
	fi

	echo "copy $layer_dir layers files"
	sudo cp -rf "$layer_dir/"* "$rootfs_dir"

	sudo -E proot "${proot_args[@]}" \
		-0 /bin/su -c "rc-update add ovmservice default &&
			rc-update del networking boot && 
			rc-update add networking default &&
		       	rc-update add podman default"

	sudo -E proot "${proot_args[@]}" \
		-0 /bin/su -c "echo rc_parallel=YES >> /etc/rc.conf"

	sudo -E proot "${proot_args[@]}" \
		-0 /bin/su -c "touch /.first_boot"

	sync # must do sync !
}

umount_rootfs() {
	echo "umount rootfs"
	umount -R "$rootfs_dir"
}

pack_rootfs() {
	echo "pack rootfs"
	cd "$output"
	zstd --force "$bootable_img"
	sha256sum "$bootable_img_zst" | tee "$bootable_img_zst.sha256sum"
	cd "$workspace"
}

echo "=== $profile_name ==="

clean_mapping
install_target_profile_deps

bootstrap_alpine
copy_layer
umount_rootfs
clean_mapping

# Final stage: boot raw disk and do update-grub
pack_rootfs
