#! /usr/bin/env bash
if [[ $SKIP_APT_GET_INSTALL == "true" ]]; then
	echo '$SKIP_APT_GET_INSTALL == true, skip install required package'
else
	sudo -E apt update && sudo -E apt -y install wget kpartx zstd || {
		echo "Error: Install wget failed"
		exit 100
	}
fi

# one package one line
preinstalled_packages="
	bash
	podman
	dmesg
	procps
	findmnt
	blkid
	mount
	tar
	zstd
	tzdata
	"
bootable_url="https://github.com/oomol/builded/releases/download/v1.1/alpine_uefi_bootable.img.zst"
# the alpine_uefi_bootable.img.zst has ROOTFS and EFI partition
rootfs_part_uuid="d1e46927-eb5d-4fbf-986a-7e5581f37a16"
efi_part_uuid="6729-82AB"
bootable_file_zst="alpine_uefi_bootable.img.zst"

clean_mapping() {
	umount -R $output/target_rootfs >/dev/null 2>&1
	# Clean kpartx mapping devices
	sudo -E losetup -a | grep alpine_uefi_bootable.img | cut -d ':' -f1 | while read -r item; do sudo -E kpartx -dv $item; done && {
		sudo -E losetup -D
	} || {
		echo "Clean kpartx mapping failed"
		exit 100
	}
}

bootstrap_alpine() {
	bootable_file="${bootable_file_zst%.*}"

	set -ex
	sudo -E rm -rf "$output/${bootable_file_zst}"
	wget -c "$bootable_url" --output-document="$output/${bootable_file_zst}" --output-file=/tmp/log_download_alpine_uefi_bootable.img.txt

	cd $output
	zstd -d -f "${bootable_file_zst}"
	# Mapping the part into /dev/mapper/loopNpN
	kpartx -av ${bootable_file}
	mount -m -U $rootfs_part_uuid ./target_rootfs
	mount -m -U $efi_part_uuid ./target_rootfs/boot/efi

	echo http://dl-cdn.alpinelinux.org/alpine/v3.20/community >>"$output/target_rootfs/etc/apk/repositories"
	set +ex

	# set qemu_flag if CROSS_BUILD
	if [[ $CROSS_BUILD == true ]]; then
		qemu_flag="--qemu=$output/qemu_bins/static_qemu/bin/qemu-aarch64"
	else
		qemu_flag=''
	fi

	# Install required package into rootfs
	pkgs=$(echo $preinstalled_packages | xargs)
	set -xe
	cd $output
	sudo -E proot $qemu_flag --rootfs=./target_rootfs \
		-b /dev:/dev \
		-b /sys:/sys \
		-b /proc:/proc \
		-b /etc/resolv.conf:/etc/resolv.conf \
		-w /root \
		-0 /bin/su -c "apk update;apk add $pkgs"
	set +xe

	echo "Generat ssh keys and copy into rootfs"
	set -ex
	cd $output
	sudo -E proot $qemu_flag --rootfs=./target_rootfs \
		-b /dev:/dev \
		-b /sys:/sys \
		-b /proc:/proc \
		-b /etc/resolv.conf:/etc/resolv.conf \
		-w /root \
		-0 /bin/su -c 'rm -rf /root/.ssh/ovm_id && ssh-keygen  -f /root/.ssh/ovm_id  -N "" && cat /root/.ssh/ovm_id.pub >> /root/.ssh/authorized_keys'
	sudo -E rm -rf /tmp/ovm_ssh
	sudo -E cp -rf $output/target_rootfs/root/.ssh /tmp/ovm_ssh
	set +xe
	sync
}
copy_layer() {
	if [[ -z ${target_profile} ]];then
		echo "Error: env target_profile empty"
		exit 100
	fi
	echo "INFO: Copy $target_profile layers files"
	export VM_CONSOLE_DEVICE=hvc0

	set -x
	cd $workspace || {
		echo 'Error: change dir to $workspace failed'
		exit 100
	}

	cd ./layers/$target_profile && {
		if [[ ${VM_PROVIDER} == "qemu" ]]; then
			find ./ -type f -exec sed -i 's/VM_CONSOLE_DEVICE/ttyAMA0/g' {} + # Replace VM_CONSOLE_DEVICE to ttyAMA0
		else
			find ./ -type f -exec sed -i 's/VM_CONSOLE_DEVICE/hvc0/g' {} + # Replace VM_CONSOLE_DEVICE to hvc0
		fi
		sudo -E cp -rf ./* "$output/target_rootfs" || {
			echo "Copy layer into $output/$target_rootfs failed"
			exit 100
		}
	} || {
		echo 'Error: change dir to ./layers/$target_profile failed'
		exit 100
	}

	cd $output && {
		sudo -E proot $qemu_flag --rootfs=./target_rootfs \
			-b /dev:/dev \
			-b /sys:/sys \
			-b /proc:/proc \
			-b /etc/resolv.conf:/etc/resolv.conf \
			-w /root \
			-0 /bin/su -c "chmod +x /etc/init.d/ovmservice && 
			rc-update add ovmservice default &&
			rc-update del networking boot && 
			rc-update add networking default &&
		       	rc-update add podman default" || {
			echo "Error: add ovmservice into default stage failed"
			exit 100
		}
	}

	cd $output && {
		sudo -E proot $qemu_flag --rootfs=./target_rootfs \
			-b /dev:/dev \
			-b /sys:/sys \
			-b /proc:/proc \
			-b /etc/resolv.conf:/etc/resolv.conf \
			-w /root \
			-0 /bin/su -c "echo rc_parallel=YES >> /etc/rc.conf" || {
			echo "Error: enable rc_parallel failed"
			exit 100
		}
	}

	cd $output && {
		sudo -E proot $qemu_flag --rootfs=./target_rootfs \
			-b /dev:/dev \
			-b /sys:/sys \
			-b /proc:/proc \
			-b /etc/resolv.conf:/etc/resolv.conf \
			-w /root \
			-0 /bin/su -c "touch /.first_boot" || {
			echo "Error: enable rc_parallel failed"
			exit 100
		}
	}

	set +x
	cd $workspace || {
		echo "Error: failed to change dir to workspace"
		exit 100
	}
	sync # must do sync !
}

umount_rootfs() {
	cd $output && {
		umount -R ./target_rootfs
	} || {
		echo "Error: failed to umount $output/target_rootfs"
		exit 100
	}
	cd $workspace || {
		echo "Change dir to  workspace failed"
		exit 100
	}
}

pack_rootfs() {
	cd $output && {
		zstd --force alpine_uefi_bootable.img && {
			sha1sum alpine_uefi_bootable.img.zst >alpine_uefi_bootable.img.zst.sha1sum
		} || {
			echo "Error: Compress alpine_uefi_bootable.img failed"
			exit 100
		}
	}

	cd "$workspace" || {
		echo "Change dir to  workspace failed"
		exit 100
	}
}

bootimage() {
	cd "$workspace" || {
		echo "Failed to change dir to workspace"
		exit 100
	}

	output=$output workspace=$workspace bash +x ./subfunc/boot_raw_disk.sh "$output/$bootable_file" arm64 || {
		echo "Error: boot $output/$bootable_file failed"
		exit 100
	}
}

try_ssh_into_vm() {
	while true; do
		ssh -o ConnectTimeout=1 \
			-o StrictHostKeyChecking=no \
			-i "/tmp/ovm_ssh/ovm_id" root@127.0.0.1 -p 10025 "update-grub && sync && halt" && {
			echo "Update-grub successful"
			break
		} || {
			echo "Try ssh into vm again..."
			sleep 2
			continue
		}
	done

}

echo "=== Bootstrap Alpine ==="
if [[ -z $workspace ]] && [[ -z $output ]]; then
	echo 'Error: env workspace or output empty'
	exit 100
fi

echo "workspace: $workspace"
echo "output: $output"
clean_mapping
bootstrap_alpine
copy_layer
umount_rootfs
clean_mapping

# Final stage: boot raw disk and do update-grub
bootimage >/tmp/vm_boot_log 2>&1 &
tail -f /tmp/vm_boot_log &
try_ssh_into_vm
pack_rootfs
exit 0
