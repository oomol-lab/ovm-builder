#! /usr/bin/env bash
PS4='Line ${LINENO}: '
set -o pipefail
set -m

usage() {
	echo "Usage: $0 -p <podman-http-port> -s <data-sector-counts> [--help]"
	echo "  -p, --podman-http-port   <number>:    TCP port number of podman api service"
	echo "  -s, --data-sector-counts <number>:    Sector counts of Data disk"
	echo "  -k, --killall                    :    Kill all services"
	echo "  --help                           :    Display this help message"
	exit 100
}

parse_args() {
	opts=$(getopt -o p:s:kh --long podman-http-port:,data-sector-counts:,killall,help -- "$@")
	if [ $? -ne 0 ]; then
		usage
	fi
	eval set -- "$opts"
	while true; do
		case "$1" in
		-h | --help)
			usage
			exit 0
			;;
		-k | --killall)
			func_kill_ovmd
			func_kill_service
			exit 0
			;;
		-p | --podman-http-port)
			podman_port="$2"
			shift 2
			;;
		-s | --data-sector-counts)
			_data_sector_counts="$2"
			IFS=',' read -r -a arr <<<"$_data_sector_counts"
			data_sector_counts=("${arr[@]}")
			shift 2
			;;
		--)
			shift
			break
			;;
		*)
			echo "Internal error!"
			usage
			;;
		esac
	done

	if [[ -z "${podman_port}" ]]; then
		echo "Need -p/--podman-http-port"
		exit 100
	fi

	if [[ -z "${data_sector_counts[*]}" ]]; then
		echo "Need -s/--data-sector-counts"
		exit 100
	fi

	UUID="8a3219d0-4002-4cd9-8cb1-f3ffe52451f1"

	echo "INFO: PODMAN API LISTEN PORT: ${podman_port}"
	echo "INFO: DATA SECTOR SIZE: ${data_sector_counts[*]}"
	echo "INFO: BLOCK UUID=${UUID}"
}

func_kill_ovmd() {
	this_pid=$$
	echo "Current ovmd pid: $this_pid"
	rs=$(ps -eo pid:10,comm,args)
	rs=$(echo -n "$rs" | grep ovmd | grep -v grep)
	rs=$(echo -n "$rs" | grep -v ${this_pid} | awk '{print $1}')
	rs=$(echo -n "$rs" | xargs)
	old_ovmd_pid="${rs}"
	if [[ -n ${old_ovmd_pid} ]]; then
		echo "kill old ovmd: ${old_ovmd_pid}"
		kill ${old_ovmd_pid}
	fi
}

func_kill_service() {
	openrc stop_all
	while true; do
		ps aux | grep -v grep | grep 'podman --log-level=' >/dev/null
		ret=$?
		test $ret -eq 0 && echo "Killing podman api..." || {
			echo "Podman api stoped"
			break
		}
	done

	PODMAN_IGNORE_CGROUPSV1_WARNING=1 podman stop -a
	ret=$?
	test $ret -eq 0 && echo "All containers stoped" || {
		echo "Containers stop failed"
		exit 100
	}
}

# If find right disk, export BLKNAME
# find_disk have no outcall
find_disk() {
	local data_sector_counts=("$@")
	for scnums in "${data_sector_counts[@]}"; do
		BLKNAME=$(grep -l -w "$scnums" /sys/block/*/size)
		if [[ -n "$BLKNAME" ]]; then
			echo "$BLKNAME:$scnums"
			BLKNAME="$(basename "$(dirname "$(grep -l -w "$scnums" /sys/block/*/size)")")"
			BLKNAME="/dev/$BLKNAME"
			echo "find $BLKNAME with $scnums"
			return
		else
			echo "can not find block with $scnums, try again"
		fi
	done

	echo "find_disk(): No block with sector counts: ${data_sector_counts[*]}"
	exit 100
}
# mount ${BLKNAME} to ${mountpoint}
# mount_disk esure the ${mountpoint} not be mount again
# mount_disk have no outcall
mount_disk() {
	cd /
	mountpoint=$1
	findmnt -o SOURCE,TARGET,UUID --kernel --raw | grep -w ${BLKNAME} | grep -w ${mountpoint}
	ret=$?
	if [[ $ret -eq 0 ]]; then
		echo "mount_disk(): $BLKNAME already mount in ${mountpoint}"
		echo -n "mount_disk(): "
		findmnt -o SOURCE,TARGET,UUID --kernel --raw | grep -w ${BLKNAME} | grep -w ${mountpoint}
		return
	fi

	if [[ -n ${mountpoint} ]]; then
		echo "mount_disk(): mount ${BLKNAME} into ${mountpoint}"
		set -ex
		mkdir -p ${mountpoint}
		mount $BLKNAME $mountpoint
		set +ex
	else
		echo "mount_disk(): Error: env mountpoint is empty"
		exit 100
	fi
}
# umount_disk umount disk ${BLKNAME} with mountpoint ${mountpoint}
# umount_disk have no outcall
umount_disk() {
	cd /
	mountpoint=$1
	findmnt -o SOURCE,TARGET,UUID --kernel --raw | grep -w ${BLKNAME} | grep -w ${mountpoint} >/dev/null
	ret=$?
	if [[ $ret -ne 0 ]]; then
		echo -n "umount_disk(): "
		echo "$BLKNAME not mount in ${mountpoint}, skip"
		return
	else
		echo -n "umount_disk(): "
		echo "Try to umount $mountpoint"
		set -ex
		umount $mountpoint
		set +ex
	fi
}

disk_format() {
	UUID=$1
	if [[ -n ${UUID} ]]; then
		msg=$(/sbin/blkid -U ${UUID} | sed 's#\n##g')
		if [[ -n $msg ]]; then
			echo "disk_format(): Find $(blkid -U ${UUID}) with ${UUID}, skip format"
			return
		else
			echo "disk_format(): Format ${BLKNAME}"
			set -ex
			/sbin/mkfs.ext4 -U ${UUID} -F ${BLKNAME}
			set +ex
			return
		fi
	else
		echo "disk_format(): Error: env UUID empty, this should not happend"
		exit 100
	fi
}

copy_var_data() {
	echo "copy_var_data(): Sync all file in /var/* to ${BLKNAME}"
	local s=$1
	local d=$2

	if [[ -z ${s} ]]; then
		echo "copy_var_data() : s is empty"
		exit 100
	fi
	if [[ -z ${d} ]]; then
		echo "copy_var_data() : d is empty"
		exit 100
	fi

	if [[ -f "${d}/.ovm_data_disk" ]]; then
		echo "copy_var_data(): find .ovm_data_disk in ${s}, skip sync file"
		return
	fi

	set -ex
	cd "${s}/" || {
		echo "copy_var_data(): change dir to ${s}/ failed, stop"
		exit 100
	}
	tar -cvf /var.tar.xz $(/bin/ls .) >/dev/null
	sync
	cd "${d}/" || {
		echo "copy_var_data(): change dir to ${d}/ failed, stop"
		exit 100
	}
	# dangerious command begain
	rm -rf ./*
	# dangerious command end
	tar -xvf /var.tar.xz >/dev/null
	touch .ovm_data_disk
	set +ex
}

write_podman_config() {
	echo -n "write_podman_config(): "
	echo "write podman's configure"
	{
		echo podman_uri="tcp://localhost:${podman_port}" >/etc/conf.d/podman
		echo 'podman_user="root"' >>/etc/conf.d/podman
		echo 'podman_opts="--time 0"' >>/etc/conf.d/podman
		echo '# autoconfigure by /opt/ovmd' >>/etc/conf.d/podman
	}
}

main() {
	parse_args "$@"
	func_kill_ovmd
	find_disk "${data_sector_counts[@]}"
	disk_format ${UUID}

	# Copy /var/* into ${BLKNAME}
	{
		mount_disk /tmp/ovm_var
		copy_var_data /var /tmp/ovm_var
		umount_disk /tmp/ovm_var
	}
	# Finally mount ${BLKNAME} to /var
	{
		mount_disk /var
	}

	{
		func_kill_service
	}

	{
		write_podman_config
	}

	{
		openrc default
		/sbin/rc-service kernelogger start
		/sbin/rc-service podman start
		/sbin/rc-service fstrim start
	}
	echo "main(): wait....."
	while true; do
		# After enabling the "Resource Saver" mode in Docker Desktop for Windows, all resources under cgroup will be frozen.
		# Since we rely on cgroup and cannot modify the logic of Docker Desktop for Windows, this is the only quick way to resolve the issue.
		find /sys/fs/cgroup/openrc.* -name cgroup.freeze -exec sh -c 'echo 0 > {}' \;
		sleep 0.5
	done
}

main "$@"
